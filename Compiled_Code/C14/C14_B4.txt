main:
        push    rbp
        mov     rbp, rsp
        push    rbx
        sub     rsp, 88
        lea     rax, [rbp-80]
        mov     rdi, rax
        call    std::vector<int, std::allocator<int> >::vector() [complete object constructor]
        mov     DWORD PTR [rbp-44], 10
        mov     DWORD PTR [rbp-20], 0
        jmp     .L7
.L15:
        mov     eax, DWORD PTR [rbp-44]
        mov     DWORD PTR [rbp-24], eax
        jmp     .L8
.L12:
        mov     DWORD PTR [rbp-28], 0
        jmp     .L9
.L11:
        mov     eax, DWORD PTR [rbp-20]
        lea     edx, [rax+1]
        mov     eax, DWORD PTR [rbp-24]
        mov     esi, edx
        mov     edi, eax
        call    __gnu_cxx::__promote_2<decltype (((__gnu_cxx::__promote_2<int, std::__is_integer<int>::__value>::__type)(0))+((__gnu_cxx::__promote_2<int, std::__is_integer<int>::__value>::__type)(0))), std::__is_integer<decltype (((__gnu_cxx::__promote_2<int, std::__is_integer<int>::__value>::__type)(0))+((__gnu_cxx::__promote_2<int, std::__is_integer<int>::__value>::__type)(0)))>::__value>::__type std::pow<int, int>(int, int)
        movq    rbx, xmm0
        mov     eax, DWORD PTR [rbp-20]
        mov     esi, eax
        mov     edi, 1
        call    __gnu_cxx::__promote_2<decltype (((__gnu_cxx::__promote_2<int, std::__is_integer<int>::__value>::__type)(0))+((__gnu_cxx::__promote_2<int, std::__is_integer<int>::__value>::__type)(0))), std::__is_integer<decltype (((__gnu_cxx::__promote_2<int, std::__is_integer<int>::__value>::__type)(0))+((__gnu_cxx::__promote_2<int, std::__is_integer<int>::__value>::__type)(0)))>::__value>::__type std::pow<int, int>(int, int)
        movq    xmm1, rbx
        divsd   xmm1, xmm0
        cvttsd2si       eax, xmm1
        mov     DWORD PTR [rbp-84], eax
        mov     ecx, DWORD PTR [rbp-84]
        mov     eax, DWORD PTR [rbp-44]
        cdq
        idiv    ecx
        mov     ecx, edx
        mov     eax, ecx
        test    eax, eax
        jne     .L10
        lea     rdx, [rbp-84]
        lea     rax, [rbp-80]
        mov     rsi, rdx
        mov     rdi, rax
        call    std::vector<int, std::allocator<int> >::push_back(int const&)
.L10:
        add     DWORD PTR [rbp-28], 1
.L9:
        cmp     DWORD PTR [rbp-28], 0
        jle     .L11
        sub     DWORD PTR [rbp-24], 1
.L8:
        cmp     DWORD PTR [rbp-24], 0
        jg      .L12
        mov     DWORD PTR [rbp-32], 1
        jmp     .L13
.L14:
        mov     DWORD PTR [rbp-52], 0
        lea     rdx, [rbp-52]
        lea     rax, [rbp-80]
        mov     rsi, rdx
        mov     rdi, rax
        call    std::vector<int, std::allocator<int> >::push_back(int&&)
        lea     rax, [rbp-80]
        mov     rdi, rax
        call    std::vector<int, std::allocator<int> >::pop_back()
        add     DWORD PTR [rbp-32], 1
.L13:
        cmp     DWORD PTR [rbp-32], 1
        jle     .L14
        add     DWORD PTR [rbp-20], 1
.L7:
        cmp     DWORD PTR [rbp-20], 0
        jle     .L15
        mov     DWORD PTR [rbp-36], 0
        jmp     .L16
.L19:
        mov     DWORD PTR [rbp-40], 0
        jmp     .L17
.L18:
        mov     eax, DWORD PTR [rbp-36]
        movsx   rdx, eax
        lea     rax, [rbp-80]
        mov     rsi, rdx
        mov     rdi, rax
        call    std::vector<int, std::allocator<int> >::at(unsigned long)
        mov     DWORD PTR [rbp-48], 1
        mov     eax, DWORD PTR [rbp-36]
        movsx   rdx, eax
        lea     rax, [rbp-80]
        mov     rsi, rdx
        mov     rdi, rax
        call    std::vector<int, std::allocator<int> >::at(unsigned long)
        mov     eax, DWORD PTR [rax]
        imul    eax, DWORD PTR [rbp-48]
        mov     esi, eax
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(int)
        mov     esi, 32
        mov     rdi, rax
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
        add     DWORD PTR [rbp-40], 1
.L17:
        cmp     DWORD PTR [rbp-40], 0
        jle     .L18
        add     DWORD PTR [rbp-36], 1
.L16:
        mov     eax, DWORD PTR [rbp-36]
        movsx   rbx, eax
        lea     rax, [rbp-80]
        mov     rdi, rax
        call    std::vector<int, std::allocator<int> >::size() const
        cmp     rbx, rax
        setb    al
        test    al, al
        jne     .L19
        mov     ebx, 0
        lea     rax, [rbp-80]
        mov     rdi, rax
        call    std::vector<int, std::allocator<int> >::~vector() [complete object destructor]
        mov     eax, ebx
        jmp     .L23
        mov     rbx, rax
        lea     rax, [rbp-80]
        mov     rdi, rax
        call    std::vector<int, std::allocator<int> >::~vector() [complete object destructor]
        mov     rax, rbx
        mov     rdi, rax
        call    _Unwind_Resume
.L23:
        mov     rbx, QWORD PTR [rbp-8]
        leave
        ret
.LC0:
        .string "vector::_M_realloc_insert"
.LC1:
        .string "vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)"